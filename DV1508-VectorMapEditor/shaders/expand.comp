#version 440 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 2, rgba32f) uniform image2D currVMap;

layout(std430, binding = 1) buffer buf
{
	vec2 brushUV;
};

uniform float radius;
uniform float strength;
uniform vec2 imgSize;


ivec2 toPixel(vec2 uv)
{
	return ivec2(imgSize * uv);
}

vec3 calcNormal(vec2 uv)
{
	vec2 t = vec2(1.0/imgSize.x, 0);
	vec2 wt = 2.*t;
	ivec2 pixel = toPixel(uv);
	vec3 p1 = imageLoad(currVMap, pixel).xyz;
	vec3 p2 = wt.xyy + imageLoad(currVMap, pixel + ivec2(1,0)).xyz;
	vec3 p3 = wt.yyx + imageLoad(currVMap, pixel + ivec2(0,1)).xyz;
	vec3 v1 = p2 - p1;
	vec3 v2 = p3 - p1;
	return normalize(cross(v2, v1));
}


void main()
{
	ivec2 i = ivec2(gl_GlobalInvocationID.xy);
	if(i.x >= 0 && i.x < imgSize.x && i.y >= 0 && i.y < imgSize.y)
	{
		vec2 uv = vec2(i) / imgSize + brushUV - radius;

		ivec2 pixel = ivec2(uv * imgSize);

		vec3 normal = calcNormal(brushUV);

		vec4 disp = imageLoad(currVMap, pixel);

		float distance = length(uv - brushUV);

		disp.xyz += strength * normal * smoothstep(radius, 0, distance);

		imageStore(currVMap, pixel, disp);
	}
}
